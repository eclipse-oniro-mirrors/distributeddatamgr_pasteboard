# Copyright (C) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/components/idl_tool/idl.gni")
import("//build/ohos.gni")
import("//foundation/distributeddatamgr/pasteboard/pasteboard.gni")

idl_gen_interface("pasteboard_service_interface") {
  sources = [
    "IPasteboardClientDeathObserver.idl",
    "IPasteboardService.idl",
    "IPasteboardSignal.idl",
  ]
  sources_common = [ "PasteboardTypes.idl" ]
  log_domainid = "0xD001C00"
  log_tag = "PBIDL"
}

config("pasteboard_service_config") {
  visibility = [ ":*" ]
  visibility += [
    "${pasteboard_root_path}/test/fuzztest/pasteboardobserver_fuzzer/*",
    "${pasteboard_root_path}/test/fuzztest/pasteboardservice_fuzzer/*",
  ]
  include_dirs = [
    "dfx/src",
    "dfx/src/behaviour",
    "dfx/src/statistic",
    "dfx/src/fault",
    "zidl/include",
    "account/include",
    "core/include",
    "load/include",
    "switch",
    "../adapter/data_share",
    "../adapter/security_level",
    "${pasteboard_innerkits_path}/include",
    "${pasteboard_utils_path}/mock/include",
    "${pasteboard_utils_path}/native/include",
    "${pasteboard_utils_path}/system/safwk/native/include",
    "${pasteboard_framework_path}/include",
    "${pasteboard_framework_path}/include/device",
    "${pasteboard_tlv_path}",
    "${target_gen_dir}",
  ]
  ldflags = [ "-Wl,--exclude-libs=ALL,--gc-sections" ]
  cflags = [
    "-fdata-sections",
    "-ffunction-sections",
    "-fvisibility=hidden",
    "-O2",
  ]
}

ohos_shared_library("pasteboard_service") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  version_script = "pasteboard_service_map"

  sources = [
    "${pasteboard_utils_path}/native/src/pasteboard_common.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_time.cpp",
    "../adapter/data_share/datashare_delegate.cpp",
    "../adapter/security_level/security_level.cpp",
    "account/src/account_manager.cpp",
    "core/src/pasteboard_dialog.cpp",
    "core/src/pasteboard_delay_manager.cpp",
    "core/src/pasteboard_disposable_manager.cpp",
    "core/src/pasteboard_lib_guard.cpp",
    "core/src/pasteboard_pattern.cpp",
    "core/src/pasteboard_service.cpp",
    "core/src/pasteboard_window_manager.cpp",
    "dfx/src/behaviour/pasteboard_behaviour_reporter_impl.cpp",
    "dfx/src/calculate_time_consuming.cpp",
    "dfx/src/command.cpp",
    "dfx/src/fault/pasteboard_fault_impl.cpp",
    "dfx/src/hiview_adapter.cpp",
    "dfx/src/pasteboard_dump_helper.cpp",
    "dfx/src/pasteboard_event_dfx.cpp",
    "dfx/src/pasteboard_trace.cpp",
    "dfx/src/reporter.cpp",
    "dfx/src/statistic/time_consuming_statistic_impl.cpp",
    "load/src/config.cpp",
    "load/src/loader.cpp",
    "switch/pasteboard_switch.cpp",
    "zidl/src/entity_recognition_observer_proxy.cpp",
    "zidl/src/pasteboard_delay_getter_proxy.cpp",
    "zidl/src/pasteboard_disposable_observer_proxy.cpp",
    "zidl/src/pasteboard_entry_getter_proxy.cpp",
    "zidl/src/pasteboard_observer_proxy.cpp",
  ]

  public_configs = [ ":pasteboard_service_config" ]
  cflags_cc = [
    "-fdata-sections",
    "-ffunction-sections",
    "-fno-asynchronous-unwind-tables",
    "-fno-unwind-tables",
    "-fomit-frame-pointer",
    "-fvisibility=hidden",
    "-D_FORTIFY_SOURCE=2",
    "-O2",
  ]

  deps = [
    ":pasteboard_service_idl",
    "${pasteboard_framework_path}:pasteboard_framework",
    "${pasteboard_innerkits_path}:pasteboard_data",
  ]
  defines = []

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:uri_permission_mgr",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "app_file_service:remote_file_share_native",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "dfs_service:distributed_file_daemon_kit_inner",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "imf:inputmethod_client",
    "input:libmmi-client",
    "ipc:ipc_single",
    "libxml2:libxml2",
    "memmgr:memmgrclient",
    "os_account:os_account_innerkits",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "udmf:udmf_client",
  ]
  if (pasteboard_vixl_part_enabled) {
    external_deps += [ "vixl:libvixl" ]
    defines += [ "PB_VIXL_ENABLE" ]
  }

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
    defines += [ "SCENE_BOARD_ENABLE" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
  if (pasteboard_dlp_part_enabled) {
    external_deps += [ "dlp_permission_service:libdlp_permission_sdk" ]
    defines += [ "WITH_DLP" ]
  }

  if (pasteboard_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "PB_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (pasteboard_device_manager_part_enabled) {
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "PB_DEVICE_MANAGER_ENABLE" ]
  }

  if (pasteboard_screenlock_mgr_part_enabled) {
    external_deps += [ "screenlock_mgr:screenlock_client" ]
    defines += [ "PB_SCREENLOCK_MGR_ENABLE" ]
  }

  if (pasteboard_dataclassification_enabled) {
    external_deps += [ "dataclassification:data_transit_mgr" ]
    defines += [ "PB_DATACLASSIFICATION_ENABLE" ]
  }

  subsystem_name = "distributeddatamgr"
  part_name = "pasteboard"
}

ohos_source_set("pasteboard_stub_proxy") {
  sanitize = {
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  public_configs = [ ":pasteboard_service_config" ]
  output_values = get_target_outputs(":pasteboard_service_interface")
  sources = filter_include(output_values, [ "*.cpp" ])
  sources += [ "zidl/src/pasteboard_observer_proxy.cpp" ]
  deps = [ ":pasteboard_service_interface" ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
    "udmf:udmf_client",
  ]
  subsystem_name = "distributeddatamgr"
  part_name = "pasteboard"
}

ohos_source_set("pasteboard_client_idl") {
  sanitize = {
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  public_configs = [ ":pasteboard_service_config" ]
  output_values = get_target_outputs(":pasteboard_service_interface")

  sources = []
  sources += filter_include(output_values, [ "*pasteboard_types.cpp" ])
  sources += filter_include(output_values, [ "*pasteboard_service_proxy.cpp" ])
  sources += filter_include(output_values, [ "*pasteboard_client_death_observer_stub.cpp" ])
  sources += filter_include(output_values, [ "*pasteboard_signal_stub.cpp" ])

  deps = [ ":pasteboard_service_interface" ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
    "udmf:udmf_client",
  ]

  subsystem_name = "distributeddatamgr"
  part_name = "pasteboard"
}

ohos_source_set("pasteboard_service_idl") {
  sanitize = {
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  public_configs = [ ":pasteboard_service_config" ]
  output_values = get_target_outputs(":pasteboard_service_interface")

  sources = []
  sources += filter_include(output_values, [ "*pasteboard_types.cpp" ])
  sources += filter_include(output_values, [ "*pasteboard_service_stub.cpp" ])
  sources += filter_include(output_values, [ "*pasteboard_client_death_observer_proxy.cpp" ])
  sources += filter_include(output_values, [ "*pasteboard_signal_proxy.cpp" ])

  deps = [ ":pasteboard_service_interface" ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
    "udmf:udmf_client",
  ]

  subsystem_name = "distributeddatamgr"
  part_name = "pasteboard"
}
