# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/distributeddatamgr/pasteboard/pasteboard.gni")

config("pasteboard_service_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "dfx/src",
    "dfx/src/behaviour",
    "dfx/src/statistic",
    "dfx/src/fault",
    "zidl/include",
    "account/include",
    "core/include",
    "load/include",
    "${pasteboard_innerkits_path}/include",
    "${pasteboard_utils_path}/mock/include",
    "${pasteboard_utils_path}/native/include",
    "${pasteboard_utils_path}/system/safwk/native/include",
    "//commonlibrary/c_utils/base/include",
    "//third_party/json/include",
    "//foundation/distributeddatamgr/pasteboard/utils/native/include",
    "//foundation/bundlemanager/bundle_framework/interfaces/inner_api/appexecfwk_core/include/bundlemgr",
    "//foundation/bundlemanager/bundle_framework/interfaces/inner_api/appexecfwk_base/include",
    "//foundation/distributeddatamgr/pasteboard/framework/framework/include",
  ]

  cflags_cc = [ "-fexceptions" ]
  if (os_dlp_part_enabled) {
    cflags_cc += [ "-DWITH_DLP" ]
  }
}

ohos_shared_library("pasteboard_service") {
  sources = [
    "${pasteboard_innerkits_path}/src/paste_data.cpp",
    "${pasteboard_innerkits_path}/src/paste_data_record.cpp",
    "${pasteboard_utils_path}/mock/src/mock_permission.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_permission.cpp",
    "account/src/account_manager.cpp",
    "core/src/dev_manager.cpp",
    "core/src/dev_profile.cpp",
    "core/src/distributed_module_config.cpp",
    "core/src/para_handle.cpp",
    "core/src/pasteboard_service.cpp",
    "dfx/src/behaviour/pasteboard_behaviour_reporter_impl.cpp",
    "dfx/src/calculate_time_consuming.cpp",
    "dfx/src/command.cpp",
    "dfx/src/fault/initialization_fault_impl.cpp",
    "dfx/src/hiview_adapter.cpp",
    "dfx/src/pasteboard_dump_helper.cpp",
    "dfx/src/pasteboard_trace.cpp",
    "dfx/src/reporter.cpp",
    "dfx/src/statistic/time_consuming_statistic_impl.cpp",
    "load/src/config.cpp",
    "load/src/loader.cpp",
    "zidl/src/pasteboard_observer_proxy.cpp",
    "zidl/src/pasteboard_service_stub.cpp",
  ]
  public_configs = [
    "//commonlibrary/c_utils/base:utils_config",
    ":pasteboard_service_config",
  ]
  deps = [
    "//foundation/bundlemanager/bundle_framework/interfaces/inner_api/appexecfwk_core:appexecfwk_core",
    "//foundation/distributeddatamgr/pasteboard/framework/framework:pasteboard_framework",
    "//third_party/jsoncpp:jsoncpp",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:abilitykit_native",
    "access_token:libaccesstoken_sdk",
    "c_utils:utils",
    "device_info_manager:distributed_device_profile_client",
    "device_manager:devicemanagersdk",
    "eventhandler:libeventhandler",
    "hisysevent_native:libhisysevent",
    "hitrace_native:hitrace_meter",
    "hitrace_native:libhitrace",
    "hiviewdfx_hilog_native:libhilog",
    "imf:inputmethod_client",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "os_account:os_account_innerkits",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:libwm",
  ]
  if (os_dlp_part_enabled) {
    external_deps += [ "dlp_permission_service:libdlp_permission_sdk" ]
  }
  subsystem_name = "distributeddatamgr"
  part_name = "pasteboard"
}
