# Copyright (C) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/distributeddatamgr/pasteboard/pasteboard.gni")

config("module_private_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "${pasteboard_innerkits_path}/include",
    "${pasteboard_utils_path}/native/include",
    "${pasteboard_service_path}/dfx/src",
    "${pasteboard_service_path}/dfx/src/behaviour",
    "${pasteboard_service_path}/dfx/src/fault",
    "${pasteboard_service_path}/dfx/src/statistic",
    "${pasteboard_service_path}/core/include",
    "include",
    "unittest/include",
    "//foundation/distributeddatamgr/pasteboard/framework/tlv",
  ]
}

module_output_path = "pasteboard/pasteboard"

ohos_unittest("PasteboardServiceTest") {
  module_out_path = module_output_path
  sanitize = {
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  cflags = [ "-fno-access-control" ]
  sources = [
    "${pasteboard_service_path}/dfx/src/behaviour/pasteboard_behaviour_reporter_impl.cpp",
    "${pasteboard_service_path}/dfx/src/fault/pasteboard_fault_impl.cpp",
    "${pasteboard_service_path}/dfx/src/hiview_adapter.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_app_event_dfx.cpp",
    "${pasteboard_service_path}/dfx/src/reporter.cpp",
    "${pasteboard_service_path}/dfx/src/statistic/time_consuming_statistic_impl.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_entry_getter_client.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_entry_getter_stub.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_time.cpp",
    "unittest/src/dfx_test.cpp",
    "unittest/src/paste_service_test.cpp",
    "unittest/src/pasteboard_entry_getter_client_test.cpp",
  ]
  configs = [ ":module_private_config" ]
  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "ffrt:libffrt",
    "googletest:gtest_main",
    "hiappevent:hiappevent_innerapi",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "image_framework:image_native",
    "ipc:ipc_core",
    "os_account:os_account_innerkits",
    "samgr:samgr_proxy",
    "udmf:udmf_client",
  ]

  deps = [
    "${pasteboard_framework_path}:pasteboard_framework",
    "${pasteboard_innerkits_path}:pasteboard_client",
    "${pasteboard_innerkits_path}:pasteboard_data",
  ]
}

ohos_unittest("PasteServInterfaceTest") {
  use_exceptions = true
  module_out_path = module_output_path
  sources = [
    "${pasteboard_root_path}/adapter/data_share/datashare_delegate.cpp",
    "${pasteboard_root_path}/adapter/security_level/security_level.cpp",
    "${pasteboard_service_path}/account/src/account_manager.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_delay_manager.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_dialog.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_disposable_manager.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_lib_guard.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_pattern.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_service.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_window_manager.cpp",
    "${pasteboard_service_path}/dfx/src/behaviour/pasteboard_behaviour_reporter_impl.cpp",
    "${pasteboard_service_path}/dfx/src/calculate_time_consuming.cpp",
    "${pasteboard_service_path}/dfx/src/command.cpp",
    "${pasteboard_service_path}/dfx/src/fault/pasteboard_fault_impl.cpp",
    "${pasteboard_service_path}/dfx/src/hiview_adapter.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_dump_helper.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_event_dfx.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_trace.cpp",
    "${pasteboard_service_path}/dfx/src/reporter.cpp",
    "${pasteboard_service_path}/dfx/src/statistic/time_consuming_statistic_impl.cpp",
    "${pasteboard_service_path}/load/src/config.cpp",
    "${pasteboard_service_path}/load/src/loader.cpp",
    "${pasteboard_service_path}/switch/pasteboard_switch.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_delay_getter_proxy.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_entry_getter_proxy.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_common.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_time.cpp",
    "unittest/src/pasteboard_service_test.cpp",
  ]
  defines = []
  configs = [ ":module_private_config" ]
  cflags = [ "-fno-access-control" ]
  include_dirs = [
    "${pasteboard_service_path}/dfx/src",
    "${pasteboard_service_path}/dfx/src/behaviour",
    "${pasteboard_service_path}/dfx/src/statistic",
    "${pasteboard_service_path}/dfx/src/fault",
    "${pasteboard_service_path}/zidl/include",
    "${pasteboard_service_path}/account/include",
    "${pasteboard_service_path}/core/include",
    "${pasteboard_service_path}/load/include",
    "${pasteboard_service_path}/switch",
    "${pasteboard_root_path}/adapter/data_share",
    "${pasteboard_root_path}/adapter/pasteboard_progress",
    "${pasteboard_root_path}/adapter/security_level",
    "${pasteboard_innerkits_path}/include",
    "${pasteboard_utils_path}/mock/include",
    "${pasteboard_utils_path}/native/include",
    "${pasteboard_utils_path}/system/safwk/native/include",
    "${pasteboard_framework_path}/framework/include",
    "${pasteboard_framework_path}/framework/include/device",
  ]
  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:uri_permission_mgr",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "app_file_service:remote_file_share_native",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "dataclassification:data_transit_mgr",
    "device_manager:devicemanagersdk",
    "dfs_service:distributed_file_daemon_kit_inner",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "hitrace:libhitracechain",
    "image_framework:image_native",
    "imf:inputmethod_client",
    "input:libmmi-client",
    "ipc:ipc_single",
    "libxml2:libxml2",
    "memmgr:memmgrclient",
    "os_account:os_account_innerkits",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "udmf:udmf_client",
  ]
  deps = [
    "${pasteboard_framework_path}:pasteboard_framework",
    "${pasteboard_innerkits_path}:pasteboard_client",
    "${pasteboard_innerkits_path}:pasteboard_data",
    "${pasteboard_service_path}:pasteboard_service",
    "${pasteboard_service_path}:pasteboard_stub_proxy",
  ]
  if (pasteboard_vixl_part_enabled) {
    external_deps += [ "vixl:libvixl" ]
    defines += [ "PB_VIXL_ENABLE" ]
  }

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
    defines += [ "SCENE_BOARD_ENABLE" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
  if (pasteboard_dlp_part_enabled) {
    external_deps += [ "dlp_permission_service:libdlp_permission_sdk" ]
    defines += [ "WITH_DLP" ]
  }
  if (pasteboard_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "PB_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (pasteboard_device_manager_part_enabled) {
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "PB_DEVICE_MANAGER_ENABLE" ]
  }

  if (pasteboard_screenlock_mgr_part_enabled) {
    external_deps += [ "screenlock_mgr:screenlock_client" ]
    defines += [ "PB_SCREENLOCK_MGR_ENABLE" ]
  }
}

ohos_unittest("PasteServInterfaceMockTest") {
  use_exceptions = true
  module_out_path = module_output_path
  sources = [
    "${pasteboard_framework_path}/clip/default_clip.cpp",
    "${pasteboard_root_path}/adapter/data_share/datashare_delegate.cpp",
    "${pasteboard_root_path}/adapter/security_level/security_level.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_delay_manager.cpp",
    "${pasteboard_service_path}/account/src/account_manager.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_disposable_manager.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_dialog.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_lib_guard.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_pattern.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_service.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_window_manager.cpp",
    "${pasteboard_service_path}/dfx/src/behaviour/pasteboard_behaviour_reporter_impl.cpp",
    "${pasteboard_service_path}/dfx/src/calculate_time_consuming.cpp",
    "${pasteboard_service_path}/dfx/src/command.cpp",
    "${pasteboard_service_path}/dfx/src/fault/pasteboard_fault_impl.cpp",
    "${pasteboard_service_path}/dfx/src/hiview_adapter.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_event_dfx.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_trace.cpp",
    "${pasteboard_service_path}/dfx/src/reporter.cpp",
    "${pasteboard_service_path}/dfx/src/statistic/time_consuming_statistic_impl.cpp",
    "${pasteboard_service_path}/load/src/config.cpp",
    "${pasteboard_service_path}/load/src/loader.cpp",
    "${pasteboard_service_path}/switch/pasteboard_switch.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_delay_getter_proxy.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_entry_getter_proxy.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_common.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_time.cpp",
    "unittest/src/pasteboard_service_mock_test.cpp",
  ]
  defines = []
  configs = [ ":module_private_config" ]
  cflags = [ "-fno-access-control" ]
  include_dirs = [
    "${pasteboard_service_path}/dfx/src",
    "${pasteboard_service_path}/dfx/src/behaviour",
    "${pasteboard_service_path}/dfx/src/statistic",
    "${pasteboard_service_path}/dfx/src/fault",
    "${pasteboard_service_path}/zidl/include",
    "${pasteboard_service_path}/account/include",
    "${pasteboard_service_path}/core/include",
    "${pasteboard_service_path}/load/include",
    "${pasteboard_service_path}/switch",
    "${pasteboard_root_path}/adapter/data_share",
    "${pasteboard_root_path}/adapter/pasteboard_progress",
    "${pasteboard_root_path}/adapter/security_level",
    "${pasteboard_innerkits_path}/include",
    "${pasteboard_utils_path}/mock/include",
    "${pasteboard_utils_path}/native/include",
    "${pasteboard_utils_path}/system/safwk/native/include",
    "${pasteboard_framework_path}/clip",
    "${pasteboard_framework_path}/framework/include",
    "${pasteboard_framework_path}/framework/include/device",
    "${pasteboard_framework_path}/tlv",
  ]
  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:uri_permission_mgr",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "app_file_service:remote_file_share_native",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "dataclassification:data_transit_mgr",
    "device_manager:devicemanagersdk",
    "dfs_service:distributed_file_daemon_kit_inner",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "hitrace:libhitracechain",
    "imf:inputmethod_client",
    "input:libmmi-client",
    "ipc:ipc_single",
    "libxml2:libxml2",
    "memmgr:memmgrclient",
    "os_account:os_account_innerkits",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "udmf:udmf_client",
  ]
  deps = [
    "${pasteboard_framework_path}:pasteboard_framework",
    "${pasteboard_innerkits_path}:pasteboard_client",
    "${pasteboard_innerkits_path}:pasteboard_data",
    "${pasteboard_service_path}:pasteboard_service",
    "${pasteboard_service_path}:pasteboard_stub_proxy",
  ]
  if (pasteboard_vixl_part_enabled) {
    external_deps += [ "vixl:libvixl" ]
    defines += [ "PB_VIXL_ENABLE" ]
  }

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
    defines += [ "SCENE_BOARD_ENABLE" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
  if (pasteboard_dlp_part_enabled) {
    external_deps += [ "dlp_permission_service:libdlp_permission_sdk" ]
    defines += [ "WITH_DLP" ]
  }
  if (pasteboard_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "PB_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (pasteboard_device_manager_part_enabled) {
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "PB_DEVICE_MANAGER_ENABLE" ]
  }

  if (pasteboard_screenlock_mgr_part_enabled) {
    external_deps += [ "screenlock_mgr:screenlock_client" ]
    defines += [ "PB_SCREENLOCK_MGR_ENABLE" ]
  }
}

ohos_unittest("PasteboardDialogNormalTest") {
  module_out_path = module_output_path
  sources = [
    "${pasteboard_service_path}/core/src/pasteboard_dialog.cpp",
    "unittest/src/pasteboard_dialog_normal_branch_test.cpp",
  ]
  configs = [ ":module_private_config" ]
  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "c_utils:utils",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
    "samgr:samgr_proxy",
  ]
}

ohos_unittest("PasteboardDialogAbnormalTest") {
  module_out_path = module_output_path

  sources = [
    "${pasteboard_service_path}/core/src/pasteboard_dialog.cpp",
    "unittest/src/pasteboard_dialog_abnormal_branch_test.cpp",
  ]
  configs = [ ":module_private_config" ]
  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "c_utils:utils",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
    "samgr:samgr_proxy",
  ]
}

ohos_unittest("PasteboardLinkedListTest") {
  module_out_path = module_output_path
  include_dirs = [ "${pasteboard_utils_path}/native/include" ]
  sources = [ "unittest/src/pasteboard_linked_list_test.cpp" ]
  external_deps = [ 
    "googletest:gtest_main",
    "hilog:libhilog",
  ]
}

ohos_unittest("PasteboardDeduplicateMemoryTest") {
  module_out_path = module_output_path
  include_dirs = [
    "${pasteboard_service_path}/dfx/src",
    "${pasteboard_utils_path}/native/include",
  ]
  sources = [ "unittest/src/pasteboard_deduplicate_memory_test.cpp" ]
  external_deps = [
    "c_utils:utils",
    "googletest:gtest_main",
    "hilog:libhilog",
  ]
}

ohos_unittest("PasteboardPatternTest") {
  use_exceptions = true
  module_out_path = module_output_path
  sources = [
    "${pasteboard_service_path}/core/src/pasteboard_lib_guard.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_pattern.cpp",
    "unittest/src/pasteboard_pattern_test.cpp",
  ]
  configs = [ ":module_private_config" ]
  external_deps = [
    "c_utils:utils",
    "ffrt:libffrt",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
    "libxml2:libxml2",
    "udmf:udmf_client",
  ]
  deps = [
    "${pasteboard_framework_path}:pasteboard_framework",
    "${pasteboard_innerkits_path}:pasteboard_client",
    "${pasteboard_innerkits_path}:pasteboard_data",
  ]
}

ohos_unittest("PasteboardDelayStubTest") {
  module_out_path = module_output_path
  defines = [
    "private = public",
    "protected = public",
  ]
  sources = [
    "${pasteboard_service_path}/zidl/src/pasteboard_delay_getter_stub.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_observer_stub.cpp",
    "unittest/src/pasteboard_delay_getter_stub_test.cpp",
  ]
  configs = [ ":module_private_config" ]
  deps = [
    "${pasteboard_framework_path}:pasteboard_framework",
    "${pasteboard_innerkits_path}:pasteboard_client",
    "${pasteboard_innerkits_path}:pasteboard_data",
    "${pasteboard_service_path}:pasteboard_service",
  ]
  external_deps = [
    "c_utils:utils",
    "ffrt:libffrt",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
    "udmf:udmf_client",
  ]
}

ohos_unittest("PasteboardDelayProxyTest") {
  module_out_path = module_output_path
  defines = [
    "private = public",
    "protected = public",
  ]
  sources = [
    "${pasteboard_service_path}/zidl/src/pasteboard_delay_getter_proxy.cpp",
    "unittest/src/pasteboard_delay_getter_proxy_test.cpp",
  ]
  configs = [ ":module_private_config" ]
  deps = [
    "${pasteboard_framework_path}:pasteboard_framework",
    "${pasteboard_innerkits_path}:pasteboard_client",
    "${pasteboard_innerkits_path}:pasteboard_data",
    "${pasteboard_service_path}:pasteboard_service",
  ]
  external_deps = [
    "c_utils:utils",
    "ffrt:libffrt",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
    "udmf:udmf_client",
  ]
}

ohos_unittest("PasteboardEntryGetterStubTest") {
  module_out_path = module_output_path
  include_dirs = []
  sources = [
    "${pasteboard_service_path}/zidl/src/pasteboard_entry_getter_stub.cpp",
    "${pasteboard_tlv_path}/message_parcel_warp.cpp",
    "unittest/src/pasteboard_entry_getter_stub_test.cpp",
  ]
  configs = [ ":module_private_config" ]
  cflags = [ "-fno-access-control" ]
  external_deps = [
    "c_utils:utils",
    "ffrt:libffrt",
    "googletest:gmock",
    "googletest:gtest_main",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "udmf:udmf_client",
  ]
  deps = [
    "${pasteboard_framework_path}:pasteboard_framework",
    "${pasteboard_innerkits_path}:pasteboard_client",
    "${pasteboard_innerkits_path}:pasteboard_data",
  ]
}

ohos_unittest("PasteboardEntryGetterProxyTest") {
  module_out_path = module_output_path
  include_dirs = []
  sources = [
    "${pasteboard_service_path}/zidl/src/pasteboard_entry_getter_proxy.cpp",
    "${pasteboard_tlv_path}/message_parcel_warp.cpp",
    "unittest/src/pasteboard_entry_getter_proxy_test.cpp",
  ]
  configs = [ ":module_private_config" ]
  cflags = [ "-fno-access-control" ]
  external_deps = [
    "c_utils:utils",
    "ffrt:libffrt",
    "googletest:gmock",
    "googletest:gtest_main",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "udmf:udmf_client",
  ]
  deps = [
    "${pasteboard_framework_path}:pasteboard_framework",
    "${pasteboard_innerkits_path}:pasteboard_client",
    "${pasteboard_innerkits_path}:pasteboard_data",
  ]
}

ohos_unittest("PasteboardLoadTest") {
  module_out_path = module_output_path
  include_dirs = [ "${pasteboard_root_path}/services/load/include" ]
  sources = [
    "${pasteboard_root_path}/services/load/src/loader.cpp",
    "unittest/src/pasteboard_load_test.cpp",
  ]
  configs = [ ":module_private_config" ]
  cflags = [ "-fno-access-control" ]
  external_deps = [
    "c_utils:utils",
    "ffrt:libffrt",
    "googletest:gtest_main",
    "hilog:libhilog",
    "init:libbegetutil",
    "udmf:udmf_client",
  ]
  deps = [ "${pasteboard_framework_path}:pasteboard_framework" ]
}

ohos_unittest("PasteboardDisposableManagerTest") {
  module_out_path = module_output_path

  cflags = [ "-fno-access-control" ]

  include_dirs = [ "${pasteboard_root_path}/test/fuzztest/mock/window" ]
  include_dirs += [
    "${pasteboard_framework_path}/include",
    "${pasteboard_service_path}/core/include",
    "${pasteboard_utils_path}/native/include",
    "unittest/mock/access_token",
  ]

  sources = [
    "${pasteboard_framework_path}/ffrt/ffrt_utils.cpp",
    "${pasteboard_framework_path}/permission/permission_utils.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_disposable_manager.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_common.cpp",
    "unittest/mock/access_token/accesstoken_kit_mock.cpp",
    "unittest/src/pasteboard_disposable_manager_test.cpp",
  ]

  deps = [
    "${pasteboard_framework_path}:pasteboard_framework",
    "${pasteboard_innerkits_path}:pasteboard_client",
    "${pasteboard_innerkits_path}:pasteboard_data",
  ]

  external_deps = [
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "ffrt:libffrt",
    "googletest:gmock",
    "googletest:gtest_main",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
  ]
}

ohos_unittest("PasteboardDelayManagerTest") {
  module_out_path = module_output_path

  cflags = [ "-fno-access-control" ]

  include_dirs = [
    "${pasteboard_framework_path}/include",
    "${pasteboard_root_path}/adapter/security_level",
    "${pasteboard_service_path}/core/include",
    "${pasteboard_service_path}/load/include",
    "${pasteboard_service_path}/switch",
    "${pasteboard_utils_path}/native/include",
  ]

  sources = [
    "${pasteboard_service_path}/core/src/pasteboard_delay_manager.cpp",
    "unittest/src/pasteboard_delay_manager_test.cpp",
  ]

  deps = [
    "${pasteboard_framework_path}:pasteboard_framework",
    "${pasteboard_innerkits_path}:pasteboard_data",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:uri_permission_mgr",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "app_file_service:remote_file_share_native",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "dataclassification:data_transit_mgr",
    "device_manager:devicemanagersdk",
    "dfs_service:distributed_file_daemon_kit_inner",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "imf:inputmethod_client",
    "input:libmmi-client",
    "ipc:ipc_single",
    "libxml2:libxml2",
    "memmgr:memmgrclient",
    "os_account:os_account_innerkits",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "udmf:udmf_client",
  ]
}

ohos_unittest("PasteServGetLocalDataTest") {
  use_exceptions = true
  module_out_path = module_output_path
  sources = [
    "${pasteboard_root_path}/adapter/data_share/datashare_delegate.cpp",
    "${pasteboard_root_path}/adapter/security_level/security_level.cpp",
    "${pasteboard_service_path}/account/src/account_manager.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_dialog.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_disposable_manager.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_lib_guard.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_pattern.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_service.cpp",
    "${pasteboard_service_path}/dfx/src/behaviour/pasteboard_behaviour_reporter_impl.cpp",
    "${pasteboard_service_path}/dfx/src/calculate_time_consuming.cpp",
    "${pasteboard_service_path}/dfx/src/command.cpp",
    "${pasteboard_service_path}/dfx/src/fault/pasteboard_fault_impl.cpp",
    "${pasteboard_service_path}/dfx/src/hiview_adapter.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_dump_helper.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_event_dfx.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_trace.cpp",
    "${pasteboard_service_path}/dfx/src/reporter.cpp",
    "${pasteboard_service_path}/dfx/src/statistic/time_consuming_statistic_impl.cpp",
    "${pasteboard_service_path}/load/src/config.cpp",
    "${pasteboard_service_path}/load/src/loader.cpp",
    "${pasteboard_service_path}/switch/pasteboard_switch.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_delay_getter_proxy.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_entry_getter_proxy.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_common.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_time.cpp",
    "unittest/src/pasteboard_service_getlocaldata_test.cpp",
  ]
  defines = []
  configs = [ ":module_private_config" ]
  cflags = [ "-fno-access-control" ]
  include_dirs = [
    "${pasteboard_service_path}/dfx/src",
    "${pasteboard_service_path}/dfx/src/behaviour",
    "${pasteboard_service_path}/dfx/src/statistic",
    "${pasteboard_service_path}/dfx/src/fault",
    "${pasteboard_service_path}/zidl/include",
    "${pasteboard_service_path}/account/include",
    "${pasteboard_service_path}/core/include",
    "${pasteboard_service_path}/load/include",
    "${pasteboard_service_path}/switch",
    "${pasteboard_root_path}/adapter/data_share",
    "${pasteboard_root_path}/adapter/pasteboard_progress",
    "${pasteboard_root_path}/adapter/security_level",
    "${pasteboard_innerkits_path}/include",
    "${pasteboard_utils_path}/mock/include",
    "${pasteboard_utils_path}/native/include",
    "${pasteboard_utils_path}/system/safwk/native/include",
    "${pasteboard_framework_path}/framework/include",
    "${pasteboard_framework_path}/framework/include/device",
  ]
  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:uri_permission_mgr",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "app_file_service:remote_file_share_native",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "dataclassification:data_transit_mgr",
    "device_manager:devicemanagersdk",
    "dfs_service:distributed_file_daemon_kit_inner",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "hitrace:libhitracechain",
    "image_framework:image_native",
    "imf:inputmethod_client",
    "input:libmmi-client",
    "ipc:ipc_single",
    "libxml2:libxml2",
    "memmgr:memmgrclient",
    "os_account:os_account_innerkits",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "udmf:udmf_client",
  ]
  deps = [
    "${pasteboard_framework_path}:pasteboard_framework",
    "${pasteboard_innerkits_path}:pasteboard_client",
    "${pasteboard_innerkits_path}:pasteboard_data",
    "${pasteboard_service_path}:pasteboard_service",
    "${pasteboard_service_path}:pasteboard_stub_proxy",
  ]
  if (pasteboard_vixl_part_enabled) {
    external_deps += [ "vixl:libvixl" ]
    defines += [ "PB_VIXL_ENABLE" ]
  }

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
    defines += [ "SCENE_BOARD_ENABLE" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
  if (pasteboard_dlp_part_enabled) {
    external_deps += [ "dlp_permission_service:libdlp_permission_sdk" ]
    defines += [ "WITH_DLP" ]
  }
  if (pasteboard_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "PB_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (pasteboard_device_manager_part_enabled) {
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "PB_DEVICE_MANAGER_ENABLE" ]
  }

  if (pasteboard_screenlock_mgr_part_enabled) {
    external_deps += [ "screenlock_mgr:screenlock_client" ]
    defines += [ "PB_SCREENLOCK_MGR_ENABLE" ]
  }
}

ohos_unittest("PasteServSubscribeTest") {
  use_exceptions = true
  module_out_path = module_output_path
  sources = [
    "${pasteboard_root_path}/adapter/data_share/datashare_delegate.cpp",
    "${pasteboard_root_path}/adapter/security_level/security_level.cpp",
    "${pasteboard_service_path}/account/src/account_manager.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_dialog.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_disposable_manager.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_lib_guard.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_pattern.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_service.cpp",
    "${pasteboard_service_path}/dfx/src/behaviour/pasteboard_behaviour_reporter_impl.cpp",
    "${pasteboard_service_path}/dfx/src/calculate_time_consuming.cpp",
    "${pasteboard_service_path}/dfx/src/command.cpp",
    "${pasteboard_service_path}/dfx/src/fault/pasteboard_fault_impl.cpp",
    "${pasteboard_service_path}/dfx/src/hiview_adapter.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_dump_helper.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_event_dfx.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_trace.cpp",
    "${pasteboard_service_path}/dfx/src/reporter.cpp",
    "${pasteboard_service_path}/dfx/src/statistic/time_consuming_statistic_impl.cpp",
    "${pasteboard_service_path}/load/src/config.cpp",
    "${pasteboard_service_path}/load/src/loader.cpp",
    "${pasteboard_service_path}/switch/pasteboard_switch.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_delay_getter_proxy.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_entry_getter_proxy.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_common.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_time.cpp",
    "unittest/src/pasteboard_service_subscribe_test.cpp",
  ]
  defines = []
  configs = [ ":module_private_config" ]
  cflags = [ "-fno-access-control" ]
  include_dirs = [
    "${pasteboard_service_path}/dfx/src",
    "${pasteboard_service_path}/dfx/src/behaviour",
    "${pasteboard_service_path}/dfx/src/statistic",
    "${pasteboard_service_path}/dfx/src/fault",
    "${pasteboard_service_path}/zidl/include",
    "${pasteboard_service_path}/account/include",
    "${pasteboard_service_path}/core/include",
    "${pasteboard_service_path}/load/include",
    "${pasteboard_service_path}/switch",
    "${pasteboard_root_path}/adapter/data_share",
    "${pasteboard_root_path}/adapter/pasteboard_progress",
    "${pasteboard_root_path}/adapter/security_level",
    "${pasteboard_innerkits_path}/include",
    "${pasteboard_utils_path}/mock/include",
    "${pasteboard_utils_path}/native/include",
    "${pasteboard_utils_path}/system/safwk/native/include",
    "${pasteboard_framework_path}/framework/include",
    "${pasteboard_framework_path}/framework/include/device",
  ]
  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:uri_permission_mgr",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "app_file_service:remote_file_share_native",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "dataclassification:data_transit_mgr",
    "device_manager:devicemanagersdk",
    "dfs_service:distributed_file_daemon_kit_inner",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "hitrace:libhitracechain",
    "image_framework:image_native",
    "imf:inputmethod_client",
    "input:libmmi-client",
    "ipc:ipc_single",
    "libxml2:libxml2",
    "memmgr:memmgrclient",
    "os_account:os_account_innerkits",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "udmf:udmf_client",
  ]
  deps = [
    "${pasteboard_framework_path}:pasteboard_framework",
    "${pasteboard_innerkits_path}:pasteboard_client",
    "${pasteboard_innerkits_path}:pasteboard_data",
    "${pasteboard_service_path}:pasteboard_service",
    "${pasteboard_service_path}:pasteboard_stub_proxy",
  ]
  if (pasteboard_vixl_part_enabled) {
    external_deps += [ "vixl:libvixl" ]
    defines += [ "PB_VIXL_ENABLE" ]
  }

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
    defines += [ "SCENE_BOARD_ENABLE" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
  if (pasteboard_dlp_part_enabled) {
    external_deps += [ "dlp_permission_service:libdlp_permission_sdk" ]
    defines += [ "WITH_DLP" ]
  }
  if (pasteboard_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "PB_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (pasteboard_device_manager_part_enabled) {
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "PB_DEVICE_MANAGER_ENABLE" ]
  }

  if (pasteboard_screenlock_mgr_part_enabled) {
    external_deps += [ "screenlock_mgr:screenlock_client" ]
    defines += [ "PB_SCREENLOCK_MGR_ENABLE" ]
  }
}

ohos_unittest("PasteServNotifyTest") {
  use_exceptions = true
  module_out_path = module_output_path
  sources = [
    "${pasteboard_root_path}/adapter/data_share/datashare_delegate.cpp",
    "${pasteboard_root_path}/adapter/security_level/security_level.cpp",
    "${pasteboard_service_path}/account/src/account_manager.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_dialog.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_disposable_manager.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_lib_guard.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_pattern.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_service.cpp",
    "${pasteboard_service_path}/dfx/src/behaviour/pasteboard_behaviour_reporter_impl.cpp",
    "${pasteboard_service_path}/dfx/src/calculate_time_consuming.cpp",
    "${pasteboard_service_path}/dfx/src/command.cpp",
    "${pasteboard_service_path}/dfx/src/fault/pasteboard_fault_impl.cpp",
    "${pasteboard_service_path}/dfx/src/hiview_adapter.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_dump_helper.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_event_dfx.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_trace.cpp",
    "${pasteboard_service_path}/dfx/src/reporter.cpp",
    "${pasteboard_service_path}/dfx/src/statistic/time_consuming_statistic_impl.cpp",
    "${pasteboard_service_path}/load/src/config.cpp",
    "${pasteboard_service_path}/load/src/loader.cpp",
    "${pasteboard_service_path}/switch/pasteboard_switch.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_delay_getter_proxy.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_entry_getter_proxy.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_common.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_time.cpp",
    "unittest/src/pasteboard_service_notify_test.cpp",
  ]
  defines = []
  configs = [ ":module_private_config" ]
  cflags = [ "-fno-access-control" ]
  include_dirs = [
    "${pasteboard_service_path}/dfx/src",
    "${pasteboard_service_path}/dfx/src/behaviour",
    "${pasteboard_service_path}/dfx/src/statistic",
    "${pasteboard_service_path}/dfx/src/fault",
    "${pasteboard_service_path}/zidl/include",
    "${pasteboard_service_path}/account/include",
    "${pasteboard_service_path}/core/include",
    "${pasteboard_service_path}/load/include",
    "${pasteboard_service_path}/switch",
    "${pasteboard_root_path}/adapter/data_share",
    "${pasteboard_root_path}/adapter/pasteboard_progress",
    "${pasteboard_root_path}/adapter/security_level",
    "${pasteboard_innerkits_path}/include",
    "${pasteboard_utils_path}/mock/include",
    "${pasteboard_utils_path}/native/include",
    "${pasteboard_utils_path}/system/safwk/native/include",
    "${pasteboard_framework_path}/framework/include",
    "${pasteboard_framework_path}/framework/include/device",
  ]
  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:uri_permission_mgr",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "app_file_service:remote_file_share_native",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "dataclassification:data_transit_mgr",
    "device_manager:devicemanagersdk",
    "dfs_service:distributed_file_daemon_kit_inner",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "hitrace:libhitracechain",
    "image_framework:image_native",
    "imf:inputmethod_client",
    "input:libmmi-client",
    "ipc:ipc_single",
    "libxml2:libxml2",
    "memmgr:memmgrclient",
    "os_account:os_account_innerkits",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "udmf:udmf_client",
  ]
  deps = [
    "${pasteboard_framework_path}:pasteboard_framework",
    "${pasteboard_innerkits_path}:pasteboard_client",
    "${pasteboard_innerkits_path}:pasteboard_data",
    "${pasteboard_service_path}:pasteboard_service",
    "${pasteboard_service_path}:pasteboard_stub_proxy",
  ]
  if (pasteboard_vixl_part_enabled) {
    external_deps += [ "vixl:libvixl" ]
    defines += [ "PB_VIXL_ENABLE" ]
  }

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
    defines += [ "SCENE_BOARD_ENABLE" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
  if (pasteboard_dlp_part_enabled) {
    external_deps += [ "dlp_permission_service:libdlp_permission_sdk" ]
    defines += [ "WITH_DLP" ]
  }
  if (pasteboard_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "PB_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (pasteboard_device_manager_part_enabled) {
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "PB_DEVICE_MANAGER_ENABLE" ]
  }

  if (pasteboard_screenlock_mgr_part_enabled) {
    external_deps += [ "screenlock_mgr:screenlock_client" ]
    defines += [ "PB_SCREENLOCK_MGR_ENABLE" ]
  }
}

ohos_unittest("PasteServSetDataTest") {
  use_exceptions = true
  module_out_path = module_output_path
  sources = [
    "${pasteboard_root_path}/adapter/data_share/datashare_delegate.cpp",
    "${pasteboard_root_path}/adapter/security_level/security_level.cpp",
    "${pasteboard_service_path}/account/src/account_manager.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_dialog.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_disposable_manager.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_lib_guard.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_pattern.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_service.cpp",
    "${pasteboard_service_path}/dfx/src/behaviour/pasteboard_behaviour_reporter_impl.cpp",
    "${pasteboard_service_path}/dfx/src/calculate_time_consuming.cpp",
    "${pasteboard_service_path}/dfx/src/command.cpp",
    "${pasteboard_service_path}/dfx/src/fault/pasteboard_fault_impl.cpp",
    "${pasteboard_service_path}/dfx/src/hiview_adapter.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_dump_helper.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_event_dfx.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_trace.cpp",
    "${pasteboard_service_path}/dfx/src/reporter.cpp",
    "${pasteboard_service_path}/dfx/src/statistic/time_consuming_statistic_impl.cpp",
    "${pasteboard_service_path}/load/src/config.cpp",
    "${pasteboard_service_path}/load/src/loader.cpp",
    "${pasteboard_service_path}/switch/pasteboard_switch.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_delay_getter_proxy.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_entry_getter_proxy.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_common.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_time.cpp",
    "unittest/src/pasteboard_service_setdata_test.cpp",
  ]
  defines = []
  configs = [ ":module_private_config" ]
  cflags = [ "-fno-access-control" ]
  include_dirs = [
    "${pasteboard_service_path}/dfx/src",
    "${pasteboard_service_path}/dfx/src/behaviour",
    "${pasteboard_service_path}/dfx/src/statistic",
    "${pasteboard_service_path}/dfx/src/fault",
    "${pasteboard_service_path}/zidl/include",
    "${pasteboard_service_path}/account/include",
    "${pasteboard_service_path}/core/include",
    "${pasteboard_service_path}/load/include",
    "${pasteboard_service_path}/switch",
    "${pasteboard_root_path}/adapter/data_share",
    "${pasteboard_root_path}/adapter/pasteboard_progress",
    "${pasteboard_root_path}/adapter/security_level",
    "${pasteboard_innerkits_path}/include",
    "${pasteboard_utils_path}/mock/include",
    "${pasteboard_utils_path}/native/include",
    "${pasteboard_utils_path}/system/safwk/native/include",
    "${pasteboard_framework_path}/framework/include",
    "${pasteboard_framework_path}/framework/include/device",
  ]
  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:uri_permission_mgr",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "app_file_service:remote_file_share_native",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "dataclassification:data_transit_mgr",
    "device_manager:devicemanagersdk",
    "dfs_service:distributed_file_daemon_kit_inner",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "hitrace:libhitracechain",
    "image_framework:image_native",
    "imf:inputmethod_client",
    "input:libmmi-client",
    "ipc:ipc_single",
    "libxml2:libxml2",
    "memmgr:memmgrclient",
    "os_account:os_account_innerkits",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "udmf:udmf_client",
  ]
  deps = [
    "${pasteboard_framework_path}:pasteboard_framework",
    "${pasteboard_innerkits_path}:pasteboard_client",
    "${pasteboard_innerkits_path}:pasteboard_data",
    "${pasteboard_service_path}:pasteboard_service",
    "${pasteboard_service_path}:pasteboard_stub_proxy",
  ]
  if (pasteboard_vixl_part_enabled) {
    external_deps += [ "vixl:libvixl" ]
    defines += [ "PB_VIXL_ENABLE" ]
  }

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
    defines += [ "SCENE_BOARD_ENABLE" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
  if (pasteboard_dlp_part_enabled) {
    external_deps += [ "dlp_permission_service:libdlp_permission_sdk" ]
    defines += [ "WITH_DLP" ]
  }
  if (pasteboard_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "PB_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (pasteboard_device_manager_part_enabled) {
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "PB_DEVICE_MANAGER_ENABLE" ]
  }

  if (pasteboard_screenlock_mgr_part_enabled) {
    external_deps += [ "screenlock_mgr:screenlock_client" ]
    defines += [ "PB_SCREENLOCK_MGR_ENABLE" ]
  }
}

ohos_unittest("PasteServGetDataTest") {
  use_exceptions = true
  module_out_path = module_output_path
  sources = [
    "${pasteboard_root_path}/adapter/data_share/datashare_delegate.cpp",
    "${pasteboard_root_path}/adapter/security_level/security_level.cpp",
    "${pasteboard_service_path}/account/src/account_manager.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_dialog.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_disposable_manager.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_lib_guard.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_pattern.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_service.cpp",
    "${pasteboard_service_path}/dfx/src/behaviour/pasteboard_behaviour_reporter_impl.cpp",
    "${pasteboard_service_path}/dfx/src/calculate_time_consuming.cpp",
    "${pasteboard_service_path}/dfx/src/command.cpp",
    "${pasteboard_service_path}/dfx/src/fault/pasteboard_fault_impl.cpp",
    "${pasteboard_service_path}/dfx/src/hiview_adapter.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_dump_helper.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_event_dfx.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_trace.cpp",
    "${pasteboard_service_path}/dfx/src/reporter.cpp",
    "${pasteboard_service_path}/dfx/src/statistic/time_consuming_statistic_impl.cpp",
    "${pasteboard_service_path}/load/src/config.cpp",
    "${pasteboard_service_path}/load/src/loader.cpp",
    "${pasteboard_service_path}/switch/pasteboard_switch.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_delay_getter_proxy.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_entry_getter_proxy.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_common.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_time.cpp",
    "unittest/src/pasteboard_service_getdata_test.cpp",
  ]
  defines = []
  configs = [ ":module_private_config" ]
  cflags = [ "-fno-access-control" ]
  include_dirs = [
    "${pasteboard_service_path}/dfx/src",
    "${pasteboard_service_path}/dfx/src/behaviour",
    "${pasteboard_service_path}/dfx/src/statistic",
    "${pasteboard_service_path}/dfx/src/fault",
    "${pasteboard_service_path}/zidl/include",
    "${pasteboard_service_path}/account/include",
    "${pasteboard_service_path}/core/include",
    "${pasteboard_service_path}/load/include",
    "${pasteboard_service_path}/switch",
    "${pasteboard_root_path}/adapter/data_share",
    "${pasteboard_root_path}/adapter/pasteboard_progress",
    "${pasteboard_root_path}/adapter/security_level",
    "${pasteboard_innerkits_path}/include",
    "${pasteboard_utils_path}/mock/include",
    "${pasteboard_utils_path}/native/include",
    "${pasteboard_utils_path}/system/safwk/native/include",
    "${pasteboard_framework_path}/framework/include",
    "${pasteboard_framework_path}/framework/include/device",
  ]
  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:uri_permission_mgr",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "app_file_service:remote_file_share_native",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "dataclassification:data_transit_mgr",
    "device_manager:devicemanagersdk",
    "dfs_service:distributed_file_daemon_kit_inner",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "hitrace:libhitracechain",
    "image_framework:image_native",
    "imf:inputmethod_client",
    "input:libmmi-client",
    "ipc:ipc_single",
    "libxml2:libxml2",
    "memmgr:memmgrclient",
    "os_account:os_account_innerkits",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "udmf:udmf_client",
  ]
  deps = [
    "${pasteboard_framework_path}:pasteboard_framework",
    "${pasteboard_innerkits_path}:pasteboard_client",
    "${pasteboard_innerkits_path}:pasteboard_data",
    "${pasteboard_service_path}:pasteboard_service",
    "${pasteboard_service_path}:pasteboard_stub_proxy",
  ]
  if (pasteboard_vixl_part_enabled) {
    external_deps += [ "vixl:libvixl" ]
    defines += [ "PB_VIXL_ENABLE" ]
  }

  if (window_manager_use_sceneboard) {
    external_deps += [ "window_manager:libwm_lite" ]
    defines += [ "SCENE_BOARD_ENABLE" ]
  } else {
    external_deps += [ "window_manager:libwm" ]
  }
  if (pasteboard_dlp_part_enabled) {
    external_deps += [ "dlp_permission_service:libdlp_permission_sdk" ]
    defines += [ "WITH_DLP" ]
  }
  if (pasteboard_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "PB_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (pasteboard_device_manager_part_enabled) {
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "PB_DEVICE_MANAGER_ENABLE" ]
  }

  if (pasteboard_screenlock_mgr_part_enabled) {
    external_deps += [ "screenlock_mgr:screenlock_client" ]
    defines += [ "PB_SCREENLOCK_MGR_ENABLE" ]
  }
}

group("unittest") {
  testonly = true
  deps = [
    ":PasteboardDeduplicateMemoryTest",
    ":PasteboardDelayManagerTest",
    ":PasteboardDelayProxyTest",
    ":PasteboardDelayStubTest",
    ":PasteboardDialogAbnormalTest",
    ":PasteboardDialogNormalTest",
    ":PasteboardDisposableManagerTest",
    ":PasteboardEntryGetterProxyTest",
    ":PasteboardEntryGetterStubTest",
    ":PasteboardLinkedListTest",
    ":PasteboardLoadTest",
    ":PasteboardPatternTest",
    ":PasteboardServiceTest",
  ]
}