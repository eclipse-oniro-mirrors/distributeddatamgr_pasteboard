# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/distributeddatamgr/pasteboard/pasteboard.gni")

config("module_private_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "${pasteboard_framework_path}/include",
    "${pasteboard_innerkits_path}/include",
    "${pasteboard_root_path}/adapter/include",
    "${pasteboard_service_path}/load/include",
    "${pasteboard_tlv_path}",
    "include",
    "test/include",
  ]
}

module_output_path = "pasteboard/pasteboard"

ohos_unittest("PasteboardFrameworkTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./cfi_blocklist.txt"
  }
  use_exceptions = true
  resource_config_file = "//foundation/distributeddatamgr/pasteboard/framework/test/resource/ohos_test.xml"
  module_out_path = module_output_path

  sources = [
    "${pasteboard_framework_path}/clip/clip_plugin.cpp",
    "${pasteboard_framework_path}/clip/default_clip.cpp",
    "${pasteboard_framework_path}/device/dev_profile.cpp",
    "${pasteboard_framework_path}/device/device_profile_proxy.cpp",
    "${pasteboard_framework_path}/device/distributed_module_config.cpp",
    "${pasteboard_framework_path}/device/dm_adapter.cpp",
    "${pasteboard_framework_path}/eventcenter/event.cpp",
    "${pasteboard_framework_path}/eventcenter/event_center.cpp",
    "${pasteboard_framework_path}/eventcenter/pasteboard_event.cpp",
    "${pasteboard_framework_path}/serializable/serializable.cpp",
    "${pasteboard_innerkits_path}/src/pasteboard_copy.cpp",
    "${pasteboard_service_path}/load/src/config.cpp",
    "mock/ffrt_utils_mock.cpp",
    "src/clip_plugin_test.cpp",
    "src/convert_utils_test.cpp",
    "src/dev_profile_test.cpp",
    "src/distributed_module_config_test.cpp",
    "src/dm_adapter_test.cpp",
    "src/event_center_test.cpp",
    "src/event_test.cpp",
    "src/paste_data_entry_test.cpp",
    "src/paste_data_record_test.cpp",
    "src/paste_data_test.cpp",
    "src/pasteboard_client_test.cpp",
    "src/pasteboard_client_udmf_delay_test.cpp",
    "src/pasteboard_copy_test.cpp",
    "src/pasteboard_event_test.cpp",
    "src/pasteboard_multi_type_unified_data_delay_test.cpp",
    "src/pasteboard_unified_data_test.cpp",
    "src/pasteboard_unified_data_uri_test.cpp",
    "src/pasteboard_utils_test.cpp",
    "src/serializable_test.cpp",
    "src/tlv_object_test.cpp",
    "src/web_controller_test.cpp",
  ]
  configs = [ ":module_private_config" ]
  cflags = [ "-fno-access-control" ]
  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "app_file_service:fileuri_native",
    "cJSON:cjson",
    "c_utils:utils",
    "device_manager:devicemanagersdk",
    "dfs_service:distributed_file_daemon_kit_inner",
    "ffrt:libffrt",
    "googletest:gmock",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "image_framework:image_native",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libuv:uv",
    "samgr:samgr_proxy",
    "udmf:udmf_client",
  ]

  deps = [ "${pasteboard_innerkits_path}:pasteboard_client" ]

  defines = []

  if (pasteboard_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "PB_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (pasteboard_device_manager_part_enabled) {
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "PB_DEVICE_MANAGER_ENABLE" ]
  }
}

ohos_unittest("PasteboardFrameworkMockTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./cfi_blocklist.txt"
  }
  resource_config_file =
      "${pasteboard_root_path}/framework/test/resource/ohos_test.xml"
  module_out_path = module_output_path

  sources = [
    "${pasteboard_framework_path}/device/dev_profile.cpp",
    "${pasteboard_framework_path}/device/device_profile_proxy.cpp",
    "${pasteboard_framework_path}/device/distributed_module_config.cpp",
    "${pasteboard_framework_path}/device/dm_adapter.cpp",
    "${pasteboard_framework_path}/eventcenter/event.cpp",
    "${pasteboard_framework_path}/eventcenter/event_center.cpp",
    "${pasteboard_framework_path}/eventcenter/pasteboard_event.cpp",
    "${pasteboard_framework_path}/serializable/serializable.cpp",
    "${pasteboard_service_path}/load/src/config.cpp",
    "mock/device_manager_mock.cpp",
    "mock/distributed_device_profile_client_mock.cpp",
    "mock/ffrt_utils_mock.cpp",
    "src/dev_profile_mock_test.cpp",
    "src/distributed_module_config_mock_test.cpp",
    "src/dm_adapter_mock_test.cpp",
  ]
  configs = [ ":module_private_config" ]
  cflags = [ "-fno-access-control" ]
  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "cJSON:cjson",
    "c_utils:utils",
    "ffrt:libffrt",
    "googletest:gmock",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "image_framework:image_native",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "samgr:samgr_proxy",
    "udmf:udmf_client",
  ]

  deps = [ "${pasteboard_innerkits_path}:pasteboard_client" ]

  defines = []

  if (pasteboard_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "PB_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (pasteboard_device_manager_part_enabled) {
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "PB_DEVICE_MANAGER_ENABLE" ]
  }
}

ohos_unittest("FfrtUtilsTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./cfi_blocklist.txt"
  }
  module_out_path = module_output_path

  sources = [ "src/ffrt_utils_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [ "${pasteboard_framework_path}:pasteboard_framework" ]

  external_deps = [
    "c_utils:utils",
    "ffrt:libffrt",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("PasteboardClientProxyMockTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./cfi_blocklist.txt"
  }
  use_exceptions = true
  resource_config_file =
      "${pasteboard_root_path}/framework/test/resource/ohos_test.xml"
  module_out_path = module_output_path
  sources = [
    "${pasteboard_root_path}/adapter/pasteboard_progress/pasteboard_progress.cpp",
    "${pasteboard_root_path}/framework/framework/device/dm_adapter.cpp",
    "${pasteboard_root_path}/framework/framework/serializable/serializable.cpp",
    "${pasteboard_root_path}/framework/innerkits/src/pasteboard_client.cpp",
    "${pasteboard_root_path}/framework/innerkits/src/pasteboard_copy.cpp",
    "${pasteboard_root_path}/framework/innerkits/src/pasteboard_load_callback.cpp",
    "${pasteboard_root_path}/framework/innerkits/src/pasteboard_progress_signal.cpp",
    "${pasteboard_root_path}/framework/innerkits/src/pasteboard_service_loader.cpp",
    "${pasteboard_root_path}/framework/innerkits/src/pasteboard_signal_callback.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_pattern.cpp",
    "${pasteboard_service_path}/load/src/config.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_delay_getter_client.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_delay_getter_stub.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_entry_getter_client.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_entry_getter_stub.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_time.cpp",
    "mock/system_ability_manager_client_mock.cpp",
    "src/pasteboard_client_proxy_mock_test.cpp",
  ]
  configs = [ ":module_private_config" ]
  cflags = [ "-fno-access-control" ]
  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:uri_permission_mgr",
    "ability_runtime:wantagent_innerkits",
    "access_token:libtokenid_sdk",
    "app_file_service:fileuri_native",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "device_manager:devicemanagersdk",
    "dfs_service:distributed_file_daemon_kit_inner",
    "ffrt:libffrt",
    "googletest:gmock",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "image_framework:image_native",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "kv_store:distributeddata_mgr",
    "libuv:uv",
    "libxml2:libxml2",
    "samgr:samgr_proxy",
    "time_service:time_client",
    "udmf:udmf_client",
  ]

  deps = [
    "${pasteboard_framework_path}:pasteboard_framework",
    "${pasteboard_innerkits_path}:pasteboard_client",
    "${pasteboard_root_path}/services:pasteboard_stub_proxy",
  ]

  defines = []

  if (pasteboard_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "PB_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (pasteboard_device_manager_part_enabled) {
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "PB_DEVICE_MANAGER_ENABLE" ]
  }
}

ohos_unittest("MessageParcelWarpTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./cfi_blocklist.txt"
  }
  resource_config_file =
      "${pasteboard_root_path}/framework/test/resource/ohos_test.xml"
  module_out_path = module_output_path

  sources = [
    "${pasteboard_root_path}/framework/framework/device/dm_adapter.cpp",
    "${pasteboard_root_path}/framework/framework/serializable/serializable.cpp",
    "${pasteboard_service_path}/load/src/config.cpp",
    "src/message_parcel_warp_test.cpp",
  ]
  configs = [ ":module_private_config" ]
  cflags = [ "-fno-access-control" ]
  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "cJSON:cjson",
    "c_utils:utils",
    "ffrt:libffrt",
    "googletest:gmock",
    "googletest:gtest_main",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "samgr:samgr_proxy",
    "udmf:udmf_client",
  ]

  deps = [
    "${pasteboard_framework_path}:pasteboard_framework",
    "${pasteboard_innerkits_path}:pasteboard_client",
  ]

  defines = []

  if (pasteboard_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "PB_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (pasteboard_device_manager_part_enabled) {
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "PB_DEVICE_MANAGER_ENABLE" ]
  }
}

ohos_unittest("PasteboardClientMockTest") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./cfi_blocklist.txt"
  }
  use_exceptions = true
  resource_config_file = "//foundation/distributeddatamgr/pasteboard/framework/test/resource/ohos_test.xml"
  module_out_path = module_output_path

  sources = [
    "${pasteboard_root_path}/adapter/data_share/datashare_delegate.cpp",
    "${pasteboard_root_path}/adapter/pasteboard_progress/pasteboard_progress.cpp",
    "${pasteboard_root_path}/adapter/security_level/security_level.cpp",
    "${pasteboard_root_path}/framework/framework/device/dm_adapter.cpp",
    "${pasteboard_root_path}/framework/framework/serializable/serializable.cpp",
    "${pasteboard_root_path}/framework/innerkits/src/pasteboard_client.cpp",
    "${pasteboard_root_path}/framework/innerkits/src/pasteboard_copy.cpp",
    "${pasteboard_root_path}/framework/innerkits/src/pasteboard_signal_callback.cpp",
    "${pasteboard_service_path}/account/src/account_manager.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_dialog.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_lib_guard.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_pattern.cpp",
    "${pasteboard_service_path}/core/src/pasteboard_service.cpp",
    "${pasteboard_service_path}/dfx/src/behaviour/pasteboard_behaviour_reporter_impl.cpp",
    "${pasteboard_service_path}/dfx/src/calculate_time_consuming.cpp",
    "${pasteboard_service_path}/dfx/src/command.cpp",
    "${pasteboard_service_path}/dfx/src/fault/pasteboard_fault_impl.cpp",
    "${pasteboard_service_path}/dfx/src/hiview_adapter.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_dump_helper.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_event_dfx.cpp",
    "${pasteboard_service_path}/dfx/src/pasteboard_trace.cpp",
    "${pasteboard_service_path}/dfx/src/reporter.cpp",
    "${pasteboard_service_path}/dfx/src/statistic/time_consuming_statistic_impl.cpp",
    "${pasteboard_service_path}/load/src/config.cpp",
    "${pasteboard_service_path}/load/src/loader.cpp",
    "${pasteboard_service_path}/switch/pasteboard_switch.cpp",
    "${pasteboard_service_path}/zidl/src/entity_recognition_observer_stub.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_delay_getter_client.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_delay_getter_proxy.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_delay_getter_stub.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_entry_getter_client.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_entry_getter_proxy.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_entry_getter_stub.cpp",
    "${pasteboard_service_path}/zidl/src/pasteboard_observer_stub.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_common.cpp",
    "${pasteboard_utils_path}/native/src/pasteboard_time.cpp",
    "src/pasteboard_client_mock_test.cpp",
  ]
  configs = [ ":module_private_config" ]
  cflags = [ "-fno-access-control" ]
  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:uri_permission_mgr",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "app_file_service:fileshare_native",
    "app_file_service:fileuri_native",
    "app_file_service:remote_file_share_native",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "dataclassification:data_transit_mgr",
    "device_manager:devicemanagersdk",
    "dfs_service:distributed_file_daemon_kit_inner",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "hitrace:libhitracechain",
    "image_framework:image_native",
    "imf:inputmethod_client",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "input:libmmi-client",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "libuv:uv",
    "libxml2:libxml2",
    "memmgr:memmgrclient",
    "os_account:os_account_innerkits",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "udmf:udmf_client",
    "window_manager:libwm",
  ]

  deps = [
    "${pasteboard_framework_path}:pasteboard_framework",
    "${pasteboard_innerkits_path}:pasteboard_client",
    "${pasteboard_root_path}/services:pasteboard_stub_proxy",
    "${pasteboard_service_path}:pasteboard_service",
  ]

  defines = []

  if (pasteboard_device_info_manager_part_enabled) {
    external_deps += [
      "device_info_manager:distributed_device_profile_common",
      "device_info_manager:distributed_device_profile_sdk",
    ]
    defines += [ "PB_DEVICE_INFO_MANAGER_ENABLE" ]
  }

  if (pasteboard_device_manager_part_enabled) {
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "PB_DEVICE_MANAGER_ENABLE" ]
  }
}

ohos_unittest("PasteboardServiceLoaderTest") {
  module_out_path = module_output_path
  defines = [
    "private = public",
    "protected = public",
  ]
  sources = [
    "${pasteboard_root_path}/framework/innerkits/src/pasteboard_load_callback.cpp",
    "${pasteboard_root_path}/framework/innerkits/src/pasteboard_service_loader.cpp",
    "src/pasteboard_service_loader_test.cpp",
  ]
  configs = [ ":module_private_config" ]
  cflags = [ "-fno-access-control" ]
  external_deps = [
    "c_utils:utils",
    "ffrt:libffrt",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_core",
    "samgr:samgr_proxy",
    "udmf:udmf_client",
  ]

  deps = [
    "${pasteboard_framework_path}:pasteboard_framework",
    "${pasteboard_innerkits_path}:pasteboard_client",
    "${pasteboard_root_path}/services:pasteboard_stub_proxy",
  ]
}

group("unittest") {
  testonly = true
  deps = [
    ":FfrtUtilsTest",
    ":MessageParcelWarpTest",
    ":PasteboardClientMockTest",
    ":PasteboardClientProxyMockTest",
    ":PasteboardFrameworkMockTest",
    ":PasteboardFrameworkTest",
    ":PasteboardServiceLoaderTest",
  ]
}
